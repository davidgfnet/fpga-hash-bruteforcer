// THIS FILE IS AUTOGENERATED BY gen.py SCRIPT
`timescale 1ns / 1ps

module md5_pipeline(
	input         clk,

	input  [ 5:0] offset_in,  // 6 bit offset to update
	input  [ 7:0] msbyte_in,  // 8 bit byte to overwrite

	// Only output the 64 LSB for the hash, since we assume
	// the number of collisions (false positives) is going to be very
	// low (2^-64 * hashrate) even at large hashrates (~1GH/sec)
	// We save one stage doing so (we could output A for 96b output at same cost)
	output reg [31:0] c_out,      // 32 bit C
	output reg [31:0] d_out       // 32 bit D
);


	wire [31:0] pipe_d [ 0:65];
	wire [31:0] pipe_c [ 0:65];
	wire [31:0] pipe_b [ 0:65];
	wire [ 5:0] offset [ 0:65];
	wire [ 7:0]   byte [ 0:65];
	wire [31:0] pipe_p [ 0:65];

	reg [ 5:0] offset_in_buf; // Buffer to allow some routing delay
	reg [ 7:0] msbyte_in_buf;
	always @(posedge clk) begin
		offset_in_buf <= offset_in;
		msbyte_in_buf <= msbyte_in;
	end

	// Input data is placed in p1, b1, c1 and d1
	//  p1 it's essentially a1 with some tranforms, therefore the input mapping
	//  that needs to be done is
	// [B] in p0->b1, [C] in b0->c1, [D] in c0->d1, [A] in d0->p1
	// a0,c0,d0 are not used, some signals are optimized away for the first stages (constant)

	assign pipe_d[0] = 32'h67452301;  // A
	assign pipe_b[1] = 32'hefcdab89;  // B
	assign pipe_c[1] = 32'h98badcfe;  // C
	assign pipe_d[1] = 32'h10325476;  // D

	assign offset[0] = offset_in_buf;
	assign   byte[0] = msbyte_in_buf;


	md5_pre_stage #( .message_number(0), .konstant(32'hd76aa478) ) md5pre0 (
		.clk(clk),
		.d_in(pipe_d[0]),
		.offset_in (offset[0]), .msbyte_in (byte[0]),
		.offset_out(offset[1]), .msbyte_out(byte[1]),
		.p_out(pipe_p[1])
	);

	md5_post_stage #( .stage_number(0), .rot_amount(7) ) md5post0 (
		.clk(clk),
		.b_in (pipe_b[1]), .c_in (pipe_c[1]), .d_in (pipe_d[1]), .p_in (pipe_p[1]),
		.b_out(pipe_b[2]), .c_out(pipe_c[2]), .d_out(pipe_d[2])
	);

	md5_pre_stage #( .message_number(1), .konstant(32'he8c7b756) ) md5pre1 (
		.clk(clk),
		.d_in(pipe_d[1]),
		.offset_in (offset[1]), .msbyte_in (byte[1]),
		.offset_out(offset[2]), .msbyte_out(byte[2]),
		.p_out(pipe_p[2])
	);

	md5_post_stage #( .stage_number(1), .rot_amount(12) ) md5post1 (
		.clk(clk),
		.b_in (pipe_b[2]), .c_in (pipe_c[2]), .d_in (pipe_d[2]), .p_in (pipe_p[2]),
		.b_out(pipe_b[3]), .c_out(pipe_c[3]), .d_out(pipe_d[3])
	);

	md5_pre_stage #( .message_number(2), .konstant(32'h242070db) ) md5pre2 (
		.clk(clk),
		.d_in(pipe_d[2]),
		.offset_in (offset[2]), .msbyte_in (byte[2]),
		.offset_out(offset[3]), .msbyte_out(byte[3]),
		.p_out(pipe_p[3])
	);

	md5_post_stage #( .stage_number(2), .rot_amount(17) ) md5post2 (
		.clk(clk),
		.b_in (pipe_b[3]), .c_in (pipe_c[3]), .d_in (pipe_d[3]), .p_in (pipe_p[3]),
		.b_out(pipe_b[4]), .c_out(pipe_c[4]), .d_out(pipe_d[4])
	);

	md5_pre_stage #( .message_number(3), .konstant(32'hc1bdceee) ) md5pre3 (
		.clk(clk),
		.d_in(pipe_d[3]),
		.offset_in (offset[3]), .msbyte_in (byte[3]),
		.offset_out(offset[4]), .msbyte_out(byte[4]),
		.p_out(pipe_p[4])
	);

	md5_post_stage #( .stage_number(3), .rot_amount(22) ) md5post3 (
		.clk(clk),
		.b_in (pipe_b[4]), .c_in (pipe_c[4]), .d_in (pipe_d[4]), .p_in (pipe_p[4]),
		.b_out(pipe_b[5]), .c_out(pipe_c[5]), .d_out(pipe_d[5])
	);

	md5_pre_stage #( .message_number(4), .konstant(32'hf57c0faf) ) md5pre4 (
		.clk(clk),
		.d_in(pipe_d[4]),
		.offset_in (offset[4]), .msbyte_in (byte[4]),
		.offset_out(offset[5]), .msbyte_out(byte[5]),
		.p_out(pipe_p[5])
	);

	md5_post_stage #( .stage_number(4), .rot_amount(7) ) md5post4 (
		.clk(clk),
		.b_in (pipe_b[5]), .c_in (pipe_c[5]), .d_in (pipe_d[5]), .p_in (pipe_p[5]),
		.b_out(pipe_b[6]), .c_out(pipe_c[6]), .d_out(pipe_d[6])
	);

	md5_pre_stage #( .message_number(5), .konstant(32'h4787c62a) ) md5pre5 (
		.clk(clk),
		.d_in(pipe_d[5]),
		.offset_in (offset[5]), .msbyte_in (byte[5]),
		.offset_out(offset[6]), .msbyte_out(byte[6]),
		.p_out(pipe_p[6])
	);

	md5_post_stage #( .stage_number(5), .rot_amount(12) ) md5post5 (
		.clk(clk),
		.b_in (pipe_b[6]), .c_in (pipe_c[6]), .d_in (pipe_d[6]), .p_in (pipe_p[6]),
		.b_out(pipe_b[7]), .c_out(pipe_c[7]), .d_out(pipe_d[7])
	);

	md5_pre_stage #( .message_number(6), .konstant(32'ha8304613) ) md5pre6 (
		.clk(clk),
		.d_in(pipe_d[6]),
		.offset_in (offset[6]), .msbyte_in (byte[6]),
		.offset_out(offset[7]), .msbyte_out(byte[7]),
		.p_out(pipe_p[7])
	);

	md5_post_stage #( .stage_number(6), .rot_amount(17) ) md5post6 (
		.clk(clk),
		.b_in (pipe_b[7]), .c_in (pipe_c[7]), .d_in (pipe_d[7]), .p_in (pipe_p[7]),
		.b_out(pipe_b[8]), .c_out(pipe_c[8]), .d_out(pipe_d[8])
	);

	md5_pre_stage #( .message_number(7), .konstant(32'hfd469501) ) md5pre7 (
		.clk(clk),
		.d_in(pipe_d[7]),
		.offset_in (offset[7]), .msbyte_in (byte[7]),
		.offset_out(offset[8]), .msbyte_out(byte[8]),
		.p_out(pipe_p[8])
	);

	md5_post_stage #( .stage_number(7), .rot_amount(22) ) md5post7 (
		.clk(clk),
		.b_in (pipe_b[8]), .c_in (pipe_c[8]), .d_in (pipe_d[8]), .p_in (pipe_p[8]),
		.b_out(pipe_b[9]), .c_out(pipe_c[9]), .d_out(pipe_d[9])
	);

	md5_pre_stage #( .message_number(8), .konstant(32'h698098d8) ) md5pre8 (
		.clk(clk),
		.d_in(pipe_d[8]),
		.offset_in (offset[8]), .msbyte_in (byte[8]),
		.offset_out(offset[9]), .msbyte_out(byte[9]),
		.p_out(pipe_p[9])
	);

	md5_post_stage #( .stage_number(8), .rot_amount(7) ) md5post8 (
		.clk(clk),
		.b_in (pipe_b[9]), .c_in (pipe_c[9]), .d_in (pipe_d[9]), .p_in (pipe_p[9]),
		.b_out(pipe_b[10]), .c_out(pipe_c[10]), .d_out(pipe_d[10])
	);

	md5_pre_stage #( .message_number(9), .konstant(32'h8b44f7af) ) md5pre9 (
		.clk(clk),
		.d_in(pipe_d[9]),
		.offset_in (offset[9]), .msbyte_in (byte[9]),
		.offset_out(offset[10]), .msbyte_out(byte[10]),
		.p_out(pipe_p[10])
	);

	md5_post_stage #( .stage_number(9), .rot_amount(12) ) md5post9 (
		.clk(clk),
		.b_in (pipe_b[10]), .c_in (pipe_c[10]), .d_in (pipe_d[10]), .p_in (pipe_p[10]),
		.b_out(pipe_b[11]), .c_out(pipe_c[11]), .d_out(pipe_d[11])
	);

	md5_pre_stage #( .message_number(10), .konstant(32'hffff5bb1) ) md5pre10 (
		.clk(clk),
		.d_in(pipe_d[10]),
		.offset_in (offset[10]), .msbyte_in (byte[10]),
		.offset_out(offset[11]), .msbyte_out(byte[11]),
		.p_out(pipe_p[11])
	);

	md5_post_stage #( .stage_number(10), .rot_amount(17) ) md5post10 (
		.clk(clk),
		.b_in (pipe_b[11]), .c_in (pipe_c[11]), .d_in (pipe_d[11]), .p_in (pipe_p[11]),
		.b_out(pipe_b[12]), .c_out(pipe_c[12]), .d_out(pipe_d[12])
	);

	md5_pre_stage #( .message_number(11), .konstant(32'h895cd7be) ) md5pre11 (
		.clk(clk),
		.d_in(pipe_d[11]),
		.offset_in (offset[11]), .msbyte_in (byte[11]),
		.offset_out(offset[12]), .msbyte_out(byte[12]),
		.p_out(pipe_p[12])
	);

	md5_post_stage #( .stage_number(11), .rot_amount(22) ) md5post11 (
		.clk(clk),
		.b_in (pipe_b[12]), .c_in (pipe_c[12]), .d_in (pipe_d[12]), .p_in (pipe_p[12]),
		.b_out(pipe_b[13]), .c_out(pipe_c[13]), .d_out(pipe_d[13])
	);

	md5_pre_stage #( .message_number(12), .konstant(32'h6b901122) ) md5pre12 (
		.clk(clk),
		.d_in(pipe_d[12]),
		.offset_in (offset[12]), .msbyte_in (byte[12]),
		.offset_out(offset[13]), .msbyte_out(byte[13]),
		.p_out(pipe_p[13])
	);

	md5_post_stage #( .stage_number(12), .rot_amount(7) ) md5post12 (
		.clk(clk),
		.b_in (pipe_b[13]), .c_in (pipe_c[13]), .d_in (pipe_d[13]), .p_in (pipe_p[13]),
		.b_out(pipe_b[14]), .c_out(pipe_c[14]), .d_out(pipe_d[14])
	);

	md5_pre_stage #( .message_number(13), .konstant(32'hfd987193) ) md5pre13 (
		.clk(clk),
		.d_in(pipe_d[13]),
		.offset_in (offset[13]), .msbyte_in (byte[13]),
		.offset_out(offset[14]), .msbyte_out(byte[14]),
		.p_out(pipe_p[14])
	);

	md5_post_stage #( .stage_number(13), .rot_amount(12) ) md5post13 (
		.clk(clk),
		.b_in (pipe_b[14]), .c_in (pipe_c[14]), .d_in (pipe_d[14]), .p_in (pipe_p[14]),
		.b_out(pipe_b[15]), .c_out(pipe_c[15]), .d_out(pipe_d[15])
	);

	md5_pre_stage #( .message_number(14), .konstant(32'ha679438e) ) md5pre14 (
		.clk(clk),
		.d_in(pipe_d[14]),
		.offset_in (offset[14]), .msbyte_in (byte[14]),
		.offset_out(offset[15]), .msbyte_out(byte[15]),
		.p_out(pipe_p[15])
	);

	md5_post_stage #( .stage_number(14), .rot_amount(17) ) md5post14 (
		.clk(clk),
		.b_in (pipe_b[15]), .c_in (pipe_c[15]), .d_in (pipe_d[15]), .p_in (pipe_p[15]),
		.b_out(pipe_b[16]), .c_out(pipe_c[16]), .d_out(pipe_d[16])
	);

	md5_pre_stage #( .message_number(15), .konstant(32'h49b40821) ) md5pre15 (
		.clk(clk),
		.d_in(pipe_d[15]),
		.offset_in (offset[15]), .msbyte_in (byte[15]),
		.offset_out(offset[16]), .msbyte_out(byte[16]),
		.p_out(pipe_p[16])
	);

	md5_post_stage #( .stage_number(15), .rot_amount(22) ) md5post15 (
		.clk(clk),
		.b_in (pipe_b[16]), .c_in (pipe_c[16]), .d_in (pipe_d[16]), .p_in (pipe_p[16]),
		.b_out(pipe_b[17]), .c_out(pipe_c[17]), .d_out(pipe_d[17])
	);

	md5_pre_stage #( .message_number(1), .konstant(32'hf61e2562) ) md5pre16 (
		.clk(clk),
		.d_in(pipe_d[16]),
		.offset_in (offset[16]), .msbyte_in (byte[16]),
		.offset_out(offset[17]), .msbyte_out(byte[17]),
		.p_out(pipe_p[17])
	);

	md5_post_stage #( .stage_number(16), .rot_amount(5) ) md5post16 (
		.clk(clk),
		.b_in (pipe_b[17]), .c_in (pipe_c[17]), .d_in (pipe_d[17]), .p_in (pipe_p[17]),
		.b_out(pipe_b[18]), .c_out(pipe_c[18]), .d_out(pipe_d[18])
	);

	md5_pre_stage #( .message_number(6), .konstant(32'hc040b340) ) md5pre17 (
		.clk(clk),
		.d_in(pipe_d[17]),
		.offset_in (offset[17]), .msbyte_in (byte[17]),
		.offset_out(offset[18]), .msbyte_out(byte[18]),
		.p_out(pipe_p[18])
	);

	md5_post_stage #( .stage_number(17), .rot_amount(9) ) md5post17 (
		.clk(clk),
		.b_in (pipe_b[18]), .c_in (pipe_c[18]), .d_in (pipe_d[18]), .p_in (pipe_p[18]),
		.b_out(pipe_b[19]), .c_out(pipe_c[19]), .d_out(pipe_d[19])
	);

	md5_pre_stage #( .message_number(11), .konstant(32'h265e5a51) ) md5pre18 (
		.clk(clk),
		.d_in(pipe_d[18]),
		.offset_in (offset[18]), .msbyte_in (byte[18]),
		.offset_out(offset[19]), .msbyte_out(byte[19]),
		.p_out(pipe_p[19])
	);

	md5_post_stage #( .stage_number(18), .rot_amount(14) ) md5post18 (
		.clk(clk),
		.b_in (pipe_b[19]), .c_in (pipe_c[19]), .d_in (pipe_d[19]), .p_in (pipe_p[19]),
		.b_out(pipe_b[20]), .c_out(pipe_c[20]), .d_out(pipe_d[20])
	);

	md5_pre_stage #( .message_number(0), .konstant(32'he9b6c7aa) ) md5pre19 (
		.clk(clk),
		.d_in(pipe_d[19]),
		.offset_in (offset[19]), .msbyte_in (byte[19]),
		.offset_out(offset[20]), .msbyte_out(byte[20]),
		.p_out(pipe_p[20])
	);

	md5_post_stage #( .stage_number(19), .rot_amount(20) ) md5post19 (
		.clk(clk),
		.b_in (pipe_b[20]), .c_in (pipe_c[20]), .d_in (pipe_d[20]), .p_in (pipe_p[20]),
		.b_out(pipe_b[21]), .c_out(pipe_c[21]), .d_out(pipe_d[21])
	);

	md5_pre_stage #( .message_number(5), .konstant(32'hd62f105d) ) md5pre20 (
		.clk(clk),
		.d_in(pipe_d[20]),
		.offset_in (offset[20]), .msbyte_in (byte[20]),
		.offset_out(offset[21]), .msbyte_out(byte[21]),
		.p_out(pipe_p[21])
	);

	md5_post_stage #( .stage_number(20), .rot_amount(5) ) md5post20 (
		.clk(clk),
		.b_in (pipe_b[21]), .c_in (pipe_c[21]), .d_in (pipe_d[21]), .p_in (pipe_p[21]),
		.b_out(pipe_b[22]), .c_out(pipe_c[22]), .d_out(pipe_d[22])
	);

	md5_pre_stage #( .message_number(10), .konstant(32'h02441453) ) md5pre21 (
		.clk(clk),
		.d_in(pipe_d[21]),
		.offset_in (offset[21]), .msbyte_in (byte[21]),
		.offset_out(offset[22]), .msbyte_out(byte[22]),
		.p_out(pipe_p[22])
	);

	md5_post_stage #( .stage_number(21), .rot_amount(9) ) md5post21 (
		.clk(clk),
		.b_in (pipe_b[22]), .c_in (pipe_c[22]), .d_in (pipe_d[22]), .p_in (pipe_p[22]),
		.b_out(pipe_b[23]), .c_out(pipe_c[23]), .d_out(pipe_d[23])
	);

	md5_pre_stage #( .message_number(15), .konstant(32'hd8a1e681) ) md5pre22 (
		.clk(clk),
		.d_in(pipe_d[22]),
		.offset_in (offset[22]), .msbyte_in (byte[22]),
		.offset_out(offset[23]), .msbyte_out(byte[23]),
		.p_out(pipe_p[23])
	);

	md5_post_stage #( .stage_number(22), .rot_amount(14) ) md5post22 (
		.clk(clk),
		.b_in (pipe_b[23]), .c_in (pipe_c[23]), .d_in (pipe_d[23]), .p_in (pipe_p[23]),
		.b_out(pipe_b[24]), .c_out(pipe_c[24]), .d_out(pipe_d[24])
	);

	md5_pre_stage #( .message_number(4), .konstant(32'he7d3fbc8) ) md5pre23 (
		.clk(clk),
		.d_in(pipe_d[23]),
		.offset_in (offset[23]), .msbyte_in (byte[23]),
		.offset_out(offset[24]), .msbyte_out(byte[24]),
		.p_out(pipe_p[24])
	);

	md5_post_stage #( .stage_number(23), .rot_amount(20) ) md5post23 (
		.clk(clk),
		.b_in (pipe_b[24]), .c_in (pipe_c[24]), .d_in (pipe_d[24]), .p_in (pipe_p[24]),
		.b_out(pipe_b[25]), .c_out(pipe_c[25]), .d_out(pipe_d[25])
	);

	md5_pre_stage #( .message_number(9), .konstant(32'h21e1cde6) ) md5pre24 (
		.clk(clk),
		.d_in(pipe_d[24]),
		.offset_in (offset[24]), .msbyte_in (byte[24]),
		.offset_out(offset[25]), .msbyte_out(byte[25]),
		.p_out(pipe_p[25])
	);

	md5_post_stage #( .stage_number(24), .rot_amount(5) ) md5post24 (
		.clk(clk),
		.b_in (pipe_b[25]), .c_in (pipe_c[25]), .d_in (pipe_d[25]), .p_in (pipe_p[25]),
		.b_out(pipe_b[26]), .c_out(pipe_c[26]), .d_out(pipe_d[26])
	);

	md5_pre_stage #( .message_number(14), .konstant(32'hc33707d6) ) md5pre25 (
		.clk(clk),
		.d_in(pipe_d[25]),
		.offset_in (offset[25]), .msbyte_in (byte[25]),
		.offset_out(offset[26]), .msbyte_out(byte[26]),
		.p_out(pipe_p[26])
	);

	md5_post_stage #( .stage_number(25), .rot_amount(9) ) md5post25 (
		.clk(clk),
		.b_in (pipe_b[26]), .c_in (pipe_c[26]), .d_in (pipe_d[26]), .p_in (pipe_p[26]),
		.b_out(pipe_b[27]), .c_out(pipe_c[27]), .d_out(pipe_d[27])
	);

	md5_pre_stage #( .message_number(3), .konstant(32'hf4d50d87) ) md5pre26 (
		.clk(clk),
		.d_in(pipe_d[26]),
		.offset_in (offset[26]), .msbyte_in (byte[26]),
		.offset_out(offset[27]), .msbyte_out(byte[27]),
		.p_out(pipe_p[27])
	);

	md5_post_stage #( .stage_number(26), .rot_amount(14) ) md5post26 (
		.clk(clk),
		.b_in (pipe_b[27]), .c_in (pipe_c[27]), .d_in (pipe_d[27]), .p_in (pipe_p[27]),
		.b_out(pipe_b[28]), .c_out(pipe_c[28]), .d_out(pipe_d[28])
	);

	md5_pre_stage #( .message_number(8), .konstant(32'h455a14ed) ) md5pre27 (
		.clk(clk),
		.d_in(pipe_d[27]),
		.offset_in (offset[27]), .msbyte_in (byte[27]),
		.offset_out(offset[28]), .msbyte_out(byte[28]),
		.p_out(pipe_p[28])
	);

	md5_post_stage #( .stage_number(27), .rot_amount(20) ) md5post27 (
		.clk(clk),
		.b_in (pipe_b[28]), .c_in (pipe_c[28]), .d_in (pipe_d[28]), .p_in (pipe_p[28]),
		.b_out(pipe_b[29]), .c_out(pipe_c[29]), .d_out(pipe_d[29])
	);

	md5_pre_stage #( .message_number(13), .konstant(32'ha9e3e905) ) md5pre28 (
		.clk(clk),
		.d_in(pipe_d[28]),
		.offset_in (offset[28]), .msbyte_in (byte[28]),
		.offset_out(offset[29]), .msbyte_out(byte[29]),
		.p_out(pipe_p[29])
	);

	md5_post_stage #( .stage_number(28), .rot_amount(5) ) md5post28 (
		.clk(clk),
		.b_in (pipe_b[29]), .c_in (pipe_c[29]), .d_in (pipe_d[29]), .p_in (pipe_p[29]),
		.b_out(pipe_b[30]), .c_out(pipe_c[30]), .d_out(pipe_d[30])
	);

	md5_pre_stage #( .message_number(2), .konstant(32'hfcefa3f8) ) md5pre29 (
		.clk(clk),
		.d_in(pipe_d[29]),
		.offset_in (offset[29]), .msbyte_in (byte[29]),
		.offset_out(offset[30]), .msbyte_out(byte[30]),
		.p_out(pipe_p[30])
	);

	md5_post_stage #( .stage_number(29), .rot_amount(9) ) md5post29 (
		.clk(clk),
		.b_in (pipe_b[30]), .c_in (pipe_c[30]), .d_in (pipe_d[30]), .p_in (pipe_p[30]),
		.b_out(pipe_b[31]), .c_out(pipe_c[31]), .d_out(pipe_d[31])
	);

	md5_pre_stage #( .message_number(7), .konstant(32'h676f02d9) ) md5pre30 (
		.clk(clk),
		.d_in(pipe_d[30]),
		.offset_in (offset[30]), .msbyte_in (byte[30]),
		.offset_out(offset[31]), .msbyte_out(byte[31]),
		.p_out(pipe_p[31])
	);

	md5_post_stage #( .stage_number(30), .rot_amount(14) ) md5post30 (
		.clk(clk),
		.b_in (pipe_b[31]), .c_in (pipe_c[31]), .d_in (pipe_d[31]), .p_in (pipe_p[31]),
		.b_out(pipe_b[32]), .c_out(pipe_c[32]), .d_out(pipe_d[32])
	);

	md5_pre_stage #( .message_number(12), .konstant(32'h8d2a4c8a) ) md5pre31 (
		.clk(clk),
		.d_in(pipe_d[31]),
		.offset_in (offset[31]), .msbyte_in (byte[31]),
		.offset_out(offset[32]), .msbyte_out(byte[32]),
		.p_out(pipe_p[32])
	);

	md5_post_stage #( .stage_number(31), .rot_amount(20) ) md5post31 (
		.clk(clk),
		.b_in (pipe_b[32]), .c_in (pipe_c[32]), .d_in (pipe_d[32]), .p_in (pipe_p[32]),
		.b_out(pipe_b[33]), .c_out(pipe_c[33]), .d_out(pipe_d[33])
	);

	md5_pre_stage #( .message_number(5), .konstant(32'hfffa3942) ) md5pre32 (
		.clk(clk),
		.d_in(pipe_d[32]),
		.offset_in (offset[32]), .msbyte_in (byte[32]),
		.offset_out(offset[33]), .msbyte_out(byte[33]),
		.p_out(pipe_p[33])
	);

	md5_post_stage #( .stage_number(32), .rot_amount(4) ) md5post32 (
		.clk(clk),
		.b_in (pipe_b[33]), .c_in (pipe_c[33]), .d_in (pipe_d[33]), .p_in (pipe_p[33]),
		.b_out(pipe_b[34]), .c_out(pipe_c[34]), .d_out(pipe_d[34])
	);

	md5_pre_stage #( .message_number(8), .konstant(32'h8771f681) ) md5pre33 (
		.clk(clk),
		.d_in(pipe_d[33]),
		.offset_in (offset[33]), .msbyte_in (byte[33]),
		.offset_out(offset[34]), .msbyte_out(byte[34]),
		.p_out(pipe_p[34])
	);

	md5_post_stage #( .stage_number(33), .rot_amount(11) ) md5post33 (
		.clk(clk),
		.b_in (pipe_b[34]), .c_in (pipe_c[34]), .d_in (pipe_d[34]), .p_in (pipe_p[34]),
		.b_out(pipe_b[35]), .c_out(pipe_c[35]), .d_out(pipe_d[35])
	);

	md5_pre_stage #( .message_number(11), .konstant(32'h6d9d6122) ) md5pre34 (
		.clk(clk),
		.d_in(pipe_d[34]),
		.offset_in (offset[34]), .msbyte_in (byte[34]),
		.offset_out(offset[35]), .msbyte_out(byte[35]),
		.p_out(pipe_p[35])
	);

	md5_post_stage #( .stage_number(34), .rot_amount(16) ) md5post34 (
		.clk(clk),
		.b_in (pipe_b[35]), .c_in (pipe_c[35]), .d_in (pipe_d[35]), .p_in (pipe_p[35]),
		.b_out(pipe_b[36]), .c_out(pipe_c[36]), .d_out(pipe_d[36])
	);

	md5_pre_stage #( .message_number(14), .konstant(32'hfde5380c) ) md5pre35 (
		.clk(clk),
		.d_in(pipe_d[35]),
		.offset_in (offset[35]), .msbyte_in (byte[35]),
		.offset_out(offset[36]), .msbyte_out(byte[36]),
		.p_out(pipe_p[36])
	);

	md5_post_stage #( .stage_number(35), .rot_amount(23) ) md5post35 (
		.clk(clk),
		.b_in (pipe_b[36]), .c_in (pipe_c[36]), .d_in (pipe_d[36]), .p_in (pipe_p[36]),
		.b_out(pipe_b[37]), .c_out(pipe_c[37]), .d_out(pipe_d[37])
	);

	md5_pre_stage #( .message_number(1), .konstant(32'ha4beea44) ) md5pre36 (
		.clk(clk),
		.d_in(pipe_d[36]),
		.offset_in (offset[36]), .msbyte_in (byte[36]),
		.offset_out(offset[37]), .msbyte_out(byte[37]),
		.p_out(pipe_p[37])
	);

	md5_post_stage #( .stage_number(36), .rot_amount(4) ) md5post36 (
		.clk(clk),
		.b_in (pipe_b[37]), .c_in (pipe_c[37]), .d_in (pipe_d[37]), .p_in (pipe_p[37]),
		.b_out(pipe_b[38]), .c_out(pipe_c[38]), .d_out(pipe_d[38])
	);

	md5_pre_stage #( .message_number(4), .konstant(32'h4bdecfa9) ) md5pre37 (
		.clk(clk),
		.d_in(pipe_d[37]),
		.offset_in (offset[37]), .msbyte_in (byte[37]),
		.offset_out(offset[38]), .msbyte_out(byte[38]),
		.p_out(pipe_p[38])
	);

	md5_post_stage #( .stage_number(37), .rot_amount(11) ) md5post37 (
		.clk(clk),
		.b_in (pipe_b[38]), .c_in (pipe_c[38]), .d_in (pipe_d[38]), .p_in (pipe_p[38]),
		.b_out(pipe_b[39]), .c_out(pipe_c[39]), .d_out(pipe_d[39])
	);

	md5_pre_stage #( .message_number(7), .konstant(32'hf6bb4b60) ) md5pre38 (
		.clk(clk),
		.d_in(pipe_d[38]),
		.offset_in (offset[38]), .msbyte_in (byte[38]),
		.offset_out(offset[39]), .msbyte_out(byte[39]),
		.p_out(pipe_p[39])
	);

	md5_post_stage #( .stage_number(38), .rot_amount(16) ) md5post38 (
		.clk(clk),
		.b_in (pipe_b[39]), .c_in (pipe_c[39]), .d_in (pipe_d[39]), .p_in (pipe_p[39]),
		.b_out(pipe_b[40]), .c_out(pipe_c[40]), .d_out(pipe_d[40])
	);

	md5_pre_stage #( .message_number(10), .konstant(32'hbebfbc70) ) md5pre39 (
		.clk(clk),
		.d_in(pipe_d[39]),
		.offset_in (offset[39]), .msbyte_in (byte[39]),
		.offset_out(offset[40]), .msbyte_out(byte[40]),
		.p_out(pipe_p[40])
	);

	md5_post_stage #( .stage_number(39), .rot_amount(23) ) md5post39 (
		.clk(clk),
		.b_in (pipe_b[40]), .c_in (pipe_c[40]), .d_in (pipe_d[40]), .p_in (pipe_p[40]),
		.b_out(pipe_b[41]), .c_out(pipe_c[41]), .d_out(pipe_d[41])
	);

	md5_pre_stage #( .message_number(13), .konstant(32'h289b7ec6) ) md5pre40 (
		.clk(clk),
		.d_in(pipe_d[40]),
		.offset_in (offset[40]), .msbyte_in (byte[40]),
		.offset_out(offset[41]), .msbyte_out(byte[41]),
		.p_out(pipe_p[41])
	);

	md5_post_stage #( .stage_number(40), .rot_amount(4) ) md5post40 (
		.clk(clk),
		.b_in (pipe_b[41]), .c_in (pipe_c[41]), .d_in (pipe_d[41]), .p_in (pipe_p[41]),
		.b_out(pipe_b[42]), .c_out(pipe_c[42]), .d_out(pipe_d[42])
	);

	md5_pre_stage #( .message_number(0), .konstant(32'heaa127fa) ) md5pre41 (
		.clk(clk),
		.d_in(pipe_d[41]),
		.offset_in (offset[41]), .msbyte_in (byte[41]),
		.offset_out(offset[42]), .msbyte_out(byte[42]),
		.p_out(pipe_p[42])
	);

	md5_post_stage #( .stage_number(41), .rot_amount(11) ) md5post41 (
		.clk(clk),
		.b_in (pipe_b[42]), .c_in (pipe_c[42]), .d_in (pipe_d[42]), .p_in (pipe_p[42]),
		.b_out(pipe_b[43]), .c_out(pipe_c[43]), .d_out(pipe_d[43])
	);

	md5_pre_stage #( .message_number(3), .konstant(32'hd4ef3085) ) md5pre42 (
		.clk(clk),
		.d_in(pipe_d[42]),
		.offset_in (offset[42]), .msbyte_in (byte[42]),
		.offset_out(offset[43]), .msbyte_out(byte[43]),
		.p_out(pipe_p[43])
	);

	md5_post_stage #( .stage_number(42), .rot_amount(16) ) md5post42 (
		.clk(clk),
		.b_in (pipe_b[43]), .c_in (pipe_c[43]), .d_in (pipe_d[43]), .p_in (pipe_p[43]),
		.b_out(pipe_b[44]), .c_out(pipe_c[44]), .d_out(pipe_d[44])
	);

	md5_pre_stage #( .message_number(6), .konstant(32'h04881d05) ) md5pre43 (
		.clk(clk),
		.d_in(pipe_d[43]),
		.offset_in (offset[43]), .msbyte_in (byte[43]),
		.offset_out(offset[44]), .msbyte_out(byte[44]),
		.p_out(pipe_p[44])
	);

	md5_post_stage #( .stage_number(43), .rot_amount(23) ) md5post43 (
		.clk(clk),
		.b_in (pipe_b[44]), .c_in (pipe_c[44]), .d_in (pipe_d[44]), .p_in (pipe_p[44]),
		.b_out(pipe_b[45]), .c_out(pipe_c[45]), .d_out(pipe_d[45])
	);

	md5_pre_stage #( .message_number(9), .konstant(32'hd9d4d039) ) md5pre44 (
		.clk(clk),
		.d_in(pipe_d[44]),
		.offset_in (offset[44]), .msbyte_in (byte[44]),
		.offset_out(offset[45]), .msbyte_out(byte[45]),
		.p_out(pipe_p[45])
	);

	md5_post_stage #( .stage_number(44), .rot_amount(4) ) md5post44 (
		.clk(clk),
		.b_in (pipe_b[45]), .c_in (pipe_c[45]), .d_in (pipe_d[45]), .p_in (pipe_p[45]),
		.b_out(pipe_b[46]), .c_out(pipe_c[46]), .d_out(pipe_d[46])
	);

	md5_pre_stage #( .message_number(12), .konstant(32'he6db99e5) ) md5pre45 (
		.clk(clk),
		.d_in(pipe_d[45]),
		.offset_in (offset[45]), .msbyte_in (byte[45]),
		.offset_out(offset[46]), .msbyte_out(byte[46]),
		.p_out(pipe_p[46])
	);

	md5_post_stage #( .stage_number(45), .rot_amount(11) ) md5post45 (
		.clk(clk),
		.b_in (pipe_b[46]), .c_in (pipe_c[46]), .d_in (pipe_d[46]), .p_in (pipe_p[46]),
		.b_out(pipe_b[47]), .c_out(pipe_c[47]), .d_out(pipe_d[47])
	);

	md5_pre_stage #( .message_number(15), .konstant(32'h1fa27cf8) ) md5pre46 (
		.clk(clk),
		.d_in(pipe_d[46]),
		.offset_in (offset[46]), .msbyte_in (byte[46]),
		.offset_out(offset[47]), .msbyte_out(byte[47]),
		.p_out(pipe_p[47])
	);

	md5_post_stage #( .stage_number(46), .rot_amount(16) ) md5post46 (
		.clk(clk),
		.b_in (pipe_b[47]), .c_in (pipe_c[47]), .d_in (pipe_d[47]), .p_in (pipe_p[47]),
		.b_out(pipe_b[48]), .c_out(pipe_c[48]), .d_out(pipe_d[48])
	);

	md5_pre_stage #( .message_number(2), .konstant(32'hc4ac5665) ) md5pre47 (
		.clk(clk),
		.d_in(pipe_d[47]),
		.offset_in (offset[47]), .msbyte_in (byte[47]),
		.offset_out(offset[48]), .msbyte_out(byte[48]),
		.p_out(pipe_p[48])
	);

	md5_post_stage #( .stage_number(47), .rot_amount(23) ) md5post47 (
		.clk(clk),
		.b_in (pipe_b[48]), .c_in (pipe_c[48]), .d_in (pipe_d[48]), .p_in (pipe_p[48]),
		.b_out(pipe_b[49]), .c_out(pipe_c[49]), .d_out(pipe_d[49])
	);

	md5_pre_stage #( .message_number(0), .konstant(32'hf4292244) ) md5pre48 (
		.clk(clk),
		.d_in(pipe_d[48]),
		.offset_in (offset[48]), .msbyte_in (byte[48]),
		.offset_out(offset[49]), .msbyte_out(byte[49]),
		.p_out(pipe_p[49])
	);

	md5_post_stage #( .stage_number(48), .rot_amount(6) ) md5post48 (
		.clk(clk),
		.b_in (pipe_b[49]), .c_in (pipe_c[49]), .d_in (pipe_d[49]), .p_in (pipe_p[49]),
		.b_out(pipe_b[50]), .c_out(pipe_c[50]), .d_out(pipe_d[50])
	);

	md5_pre_stage #( .message_number(7), .konstant(32'h432aff97) ) md5pre49 (
		.clk(clk),
		.d_in(pipe_d[49]),
		.offset_in (offset[49]), .msbyte_in (byte[49]),
		.offset_out(offset[50]), .msbyte_out(byte[50]),
		.p_out(pipe_p[50])
	);

	md5_post_stage #( .stage_number(49), .rot_amount(10) ) md5post49 (
		.clk(clk),
		.b_in (pipe_b[50]), .c_in (pipe_c[50]), .d_in (pipe_d[50]), .p_in (pipe_p[50]),
		.b_out(pipe_b[51]), .c_out(pipe_c[51]), .d_out(pipe_d[51])
	);

	md5_pre_stage #( .message_number(14), .konstant(32'hab9423a7) ) md5pre50 (
		.clk(clk),
		.d_in(pipe_d[50]),
		.offset_in (offset[50]), .msbyte_in (byte[50]),
		.offset_out(offset[51]), .msbyte_out(byte[51]),
		.p_out(pipe_p[51])
	);

	md5_post_stage #( .stage_number(50), .rot_amount(15) ) md5post50 (
		.clk(clk),
		.b_in (pipe_b[51]), .c_in (pipe_c[51]), .d_in (pipe_d[51]), .p_in (pipe_p[51]),
		.b_out(pipe_b[52]), .c_out(pipe_c[52]), .d_out(pipe_d[52])
	);

	md5_pre_stage #( .message_number(5), .konstant(32'hfc93a039) ) md5pre51 (
		.clk(clk),
		.d_in(pipe_d[51]),
		.offset_in (offset[51]), .msbyte_in (byte[51]),
		.offset_out(offset[52]), .msbyte_out(byte[52]),
		.p_out(pipe_p[52])
	);

	md5_post_stage #( .stage_number(51), .rot_amount(21) ) md5post51 (
		.clk(clk),
		.b_in (pipe_b[52]), .c_in (pipe_c[52]), .d_in (pipe_d[52]), .p_in (pipe_p[52]),
		.b_out(pipe_b[53]), .c_out(pipe_c[53]), .d_out(pipe_d[53])
	);

	md5_pre_stage #( .message_number(12), .konstant(32'h655b59c3) ) md5pre52 (
		.clk(clk),
		.d_in(pipe_d[52]),
		.offset_in (offset[52]), .msbyte_in (byte[52]),
		.offset_out(offset[53]), .msbyte_out(byte[53]),
		.p_out(pipe_p[53])
	);

	md5_post_stage #( .stage_number(52), .rot_amount(6) ) md5post52 (
		.clk(clk),
		.b_in (pipe_b[53]), .c_in (pipe_c[53]), .d_in (pipe_d[53]), .p_in (pipe_p[53]),
		.b_out(pipe_b[54]), .c_out(pipe_c[54]), .d_out(pipe_d[54])
	);

	md5_pre_stage #( .message_number(3), .konstant(32'h8f0ccc92) ) md5pre53 (
		.clk(clk),
		.d_in(pipe_d[53]),
		.offset_in (offset[53]), .msbyte_in (byte[53]),
		.offset_out(offset[54]), .msbyte_out(byte[54]),
		.p_out(pipe_p[54])
	);

	md5_post_stage #( .stage_number(53), .rot_amount(10) ) md5post53 (
		.clk(clk),
		.b_in (pipe_b[54]), .c_in (pipe_c[54]), .d_in (pipe_d[54]), .p_in (pipe_p[54]),
		.b_out(pipe_b[55]), .c_out(pipe_c[55]), .d_out(pipe_d[55])
	);

	md5_pre_stage #( .message_number(10), .konstant(32'hffeff47d) ) md5pre54 (
		.clk(clk),
		.d_in(pipe_d[54]),
		.offset_in (offset[54]), .msbyte_in (byte[54]),
		.offset_out(offset[55]), .msbyte_out(byte[55]),
		.p_out(pipe_p[55])
	);

	md5_post_stage #( .stage_number(54), .rot_amount(15) ) md5post54 (
		.clk(clk),
		.b_in (pipe_b[55]), .c_in (pipe_c[55]), .d_in (pipe_d[55]), .p_in (pipe_p[55]),
		.b_out(pipe_b[56]), .c_out(pipe_c[56]), .d_out(pipe_d[56])
	);

	md5_pre_stage #( .message_number(1), .konstant(32'h85845dd1) ) md5pre55 (
		.clk(clk),
		.d_in(pipe_d[55]),
		.offset_in (offset[55]), .msbyte_in (byte[55]),
		.offset_out(offset[56]), .msbyte_out(byte[56]),
		.p_out(pipe_p[56])
	);

	md5_post_stage #( .stage_number(55), .rot_amount(21) ) md5post55 (
		.clk(clk),
		.b_in (pipe_b[56]), .c_in (pipe_c[56]), .d_in (pipe_d[56]), .p_in (pipe_p[56]),
		.b_out(pipe_b[57]), .c_out(pipe_c[57]), .d_out(pipe_d[57])
	);

	md5_pre_stage #( .message_number(8), .konstant(32'h6fa87e4f) ) md5pre56 (
		.clk(clk),
		.d_in(pipe_d[56]),
		.offset_in (offset[56]), .msbyte_in (byte[56]),
		.offset_out(offset[57]), .msbyte_out(byte[57]),
		.p_out(pipe_p[57])
	);

	md5_post_stage #( .stage_number(56), .rot_amount(6) ) md5post56 (
		.clk(clk),
		.b_in (pipe_b[57]), .c_in (pipe_c[57]), .d_in (pipe_d[57]), .p_in (pipe_p[57]),
		.b_out(pipe_b[58]), .c_out(pipe_c[58]), .d_out(pipe_d[58])
	);

	md5_pre_stage #( .message_number(15), .konstant(32'hfe2ce6e0) ) md5pre57 (
		.clk(clk),
		.d_in(pipe_d[57]),
		.offset_in (offset[57]), .msbyte_in (byte[57]),
		.offset_out(offset[58]), .msbyte_out(byte[58]),
		.p_out(pipe_p[58])
	);

	md5_post_stage #( .stage_number(57), .rot_amount(10) ) md5post57 (
		.clk(clk),
		.b_in (pipe_b[58]), .c_in (pipe_c[58]), .d_in (pipe_d[58]), .p_in (pipe_p[58]),
		.b_out(pipe_b[59]), .c_out(pipe_c[59]), .d_out(pipe_d[59])
	);

	md5_pre_stage #( .message_number(6), .konstant(32'ha3014314) ) md5pre58 (
		.clk(clk),
		.d_in(pipe_d[58]),
		.offset_in (offset[58]), .msbyte_in (byte[58]),
		.offset_out(offset[59]), .msbyte_out(byte[59]),
		.p_out(pipe_p[59])
	);

	md5_post_stage #( .stage_number(58), .rot_amount(15) ) md5post58 (
		.clk(clk),
		.b_in (pipe_b[59]), .c_in (pipe_c[59]), .d_in (pipe_d[59]), .p_in (pipe_p[59]),
		.b_out(pipe_b[60]), .c_out(pipe_c[60]), .d_out(pipe_d[60])
	);

	md5_pre_stage #( .message_number(13), .konstant(32'h4e0811a1) ) md5pre59 (
		.clk(clk),
		.d_in(pipe_d[59]),
		.offset_in (offset[59]), .msbyte_in (byte[59]),
		.offset_out(offset[60]), .msbyte_out(byte[60]),
		.p_out(pipe_p[60])
	);

	md5_post_stage #( .stage_number(59), .rot_amount(21) ) md5post59 (
		.clk(clk),
		.b_in (pipe_b[60]), .c_in (pipe_c[60]), .d_in (pipe_d[60]), .p_in (pipe_p[60]),
		.b_out(pipe_b[61]), .c_out(pipe_c[61]), .d_out(pipe_d[61])
	);

	md5_pre_stage #( .message_number(4), .konstant(32'hf7537e82) ) md5pre60 (
		.clk(clk),
		.d_in(pipe_d[60]),
		.offset_in (offset[60]), .msbyte_in (byte[60]),
		.offset_out(offset[61]), .msbyte_out(byte[61]),
		.p_out(pipe_p[61])
	);

	md5_post_stage #( .stage_number(60), .rot_amount(6) ) md5post60 (
		.clk(clk),
		.b_in (pipe_b[61]), .c_in (pipe_c[61]), .d_in (pipe_d[61]), .p_in (pipe_p[61]),
		.b_out(pipe_b[62]), .c_out(pipe_c[62]), .d_out(pipe_d[62])
	);

	md5_pre_stage #( .message_number(11), .konstant(32'hbd3af235) ) md5pre61 (
		.clk(clk),
		.d_in(pipe_d[61]),
		.offset_in (offset[61]), .msbyte_in (byte[61]),
		.offset_out(offset[62]), .msbyte_out(byte[62]),
		.p_out(pipe_p[62])
	);

	md5_post_stage #( .stage_number(61), .rot_amount(10) ) md5post61 (
		.clk(clk),
		.b_in (pipe_b[62]), .c_in (pipe_c[62]), .d_in (pipe_d[62]), .p_in (pipe_p[62]),
		.b_out(pipe_b[63]), .c_out(pipe_c[63]), .d_out(pipe_d[63])
	);

	md5_pre_stage #( .message_number(2), .konstant(32'h2ad7d2bb) ) md5pre62 (
		.clk(clk),
		.d_in(pipe_d[62]),
		.offset_in (offset[62]), .msbyte_in (byte[62]),
		.offset_out(offset[63]), .msbyte_out(byte[63]),
		.p_out(pipe_p[63])
	);

	md5_post_stage #( .stage_number(62), .rot_amount(15) ) md5post62 (
		.clk(clk),
		.b_in (pipe_b[63]), .c_in (pipe_c[63]), .d_in (pipe_d[63]), .p_in (pipe_p[63]),
		.b_out(pipe_b[64]), .c_out(pipe_c[64]), .d_out(pipe_d[64])
	);

	md5_pre_stage #( .message_number(9), .konstant(32'heb86d391) ) md5pre63 (
		.clk(clk),
		.d_in(pipe_d[63]),
		.offset_in (offset[63]), .msbyte_in (byte[63]),
		.offset_out(offset[64]), .msbyte_out(byte[64]),
		.p_out(pipe_p[64])
	);

	md5_post_stage #( .stage_number(63), .rot_amount(21) ) md5post63 (
		.clk(clk),
		.b_in (pipe_b[64]), .c_in (pipe_c[64]), .d_in (pipe_d[64]), .p_in (pipe_p[64]),
		.b_out(pipe_b[65]), .c_out(pipe_c[65]), .d_out(pipe_d[65])
	);

	// Output calculation (endian swap them)
	// Could optimize away additions
	always @(posedge clk) begin
		c_out <= pipe_c[65] + 32'h98badcfe;
		d_out <= pipe_d[65] + 32'h10325476;
	end

endmodule
